#!/usr/bin/env node
/**
 * 🔍 SAMIA TAROT - Quick Database Audit Script
 * Comprehensive check of current database state
 */

const { createClient } = require('@supabase/supabase-js');

// Supabase configuration
const supabaseUrl = 'https://uuseflmielktdcltzwzt.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV1c2VmbG1pZWxrdGRjbHR6d3p0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODM0NTExNSwiZXhwIjoyMDYzOTIxMTE1fQ.TNcj0otaeYtl0nDJYn760wSgSuKSYG8s7r-LD04Z9_E';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

class DatabaseAuditor {
  constructor() {
    this.criticalTables = [
      'profiles', 'bookings', 'services', 'notifications',
      'payment_methods', 'wallet_transactions', 'payment_receipts',
      'chat_sessions', 'chat_messages', 'voice_notes',
      'daily_analytics', 'reader_analytics', 'user_activity_logs',
      'ai_learning_data', 'ai_reading_results', 'reader_applications',
      'tarot_decks', 'tarot_spreads', 'call_sessions',
      'call_recordings', 'emergency_call_logs', 'reader_schedule',
      'working_hours_requests', 'system_settings', 'app_config',
      'admin_users', 'emergency_escalations'
    ];
    
    this.productionBlockers = [
      'payment_methods', 'wallet_transactions', 'chat_sessions',
      'daily_analytics', 'emergency_escalations'
    ];
  }

  async runAudit() {
    console.log('🔍 SAMIA TAROT - DATABASE AUDIT REPORT');
    console.log('═══════════════════════════════════════');
    console.log('Date:', new Date().toISOString());
    console.log('');

    try {
      const results = await this.checkAllTables();
      this.generateReport(results);
    } catch (error) {
      console.error('💥 Audit failed:', error.message);
    }
  }

  async checkAllTables() {
    const results = {
      existing: [],
      missing: [],
      errors: [],
      totalTables: 0,
      completionPercentage: 0
    };

    console.log('📋 CHECKING CRITICAL TABLES:\n');

    for (const table of this.criticalTables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('id')
          .limit(1);

        if (error) {
          console.log(`❌ ${table} - ${error.message}`);
          results.missing.push(table);
        } else {
          console.log(`✅ ${table} - EXISTS and ACCESSIBLE`);
          results.existing.push(table);
        }
      } catch (e) {
        console.log(`💥 ${table} - CONNECTION ERROR: ${e.message}`);
        results.errors.push({ table, error: e.message });
      }
    }

    results.totalTables = this.criticalTables.length;
    results.completionPercentage = (results.existing.length / results.totalTables * 100).toFixed(1);

    return results;
  }

  generateReport(results) {
    console.log('\n📊 AUDIT SUMMARY:');
    console.log('════════════════════');
    console.log(`✅ Existing Tables: ${results.existing.length}`);
    console.log(`❌ Missing Tables: ${results.missing.length}`);
    console.log(`💥 Error Tables: ${results.errors.length}`);
    console.log(`📈 Completion: ${results.completionPercentage}%`);

    if (results.missing.length > 0) {
      console.log('\n🚨 MISSING CRITICAL TABLES:');
      console.log('─────────────────────────────');
      results.missing.forEach(table => {
        const isBlocker = this.productionBlockers.includes(table);
        const priority = isBlocker ? '🔴 CRITICAL' : '🟡 HIGH';
        console.log(`${priority} ${table}`);
      });
    }

    if (results.errors.length > 0) {
      console.log('\n💥 CONNECTION ERRORS:');
      console.log('────────────────────────');
      results.errors.forEach(err => {
        console.log(`❌ ${err.table}: ${err.error}`);
      });
    }

    // Generate recommendations
    console.log('\n💡 RECOMMENDATIONS:');
    console.log('───────────────────────');
    
    if (results.completionPercentage < 50) {
      console.log('🔴 CRITICAL: Execute COMPLETE_MISSING_TABLES.sql immediately');
    } else if (results.completionPercentage < 80) {
      console.log('🟡 HIGH: Execute remaining table creation scripts');
    } else if (results.completionPercentage < 95) {
      console.log('🟢 GOOD: Minor table fixes needed');
    } else {
      console.log('🎉 EXCELLENT: Database is production ready');
    }

    // Check production blockers
    const missingBlockers = results.missing.filter(table => 
      this.productionBlockers.includes(table)
    );

    if (missingBlockers.length > 0) {
      console.log('\n🚨 PRODUCTION BLOCKERS DETECTED:');
      console.log('─────────────────────────────────');
      missingBlockers.forEach(table => {
        console.log(`🔴 ${table} - Blocks core functionality`);
      });
      console.log('\n⚡ IMMEDIATE ACTION REQUIRED:');
      console.log('Execute COMPLETE_MISSING_TABLES.sql to fix all issues');
    }
  }
}

// Run the audit
const auditor = new DatabaseAuditor();
auditor.runAudit().catch(console.error); 
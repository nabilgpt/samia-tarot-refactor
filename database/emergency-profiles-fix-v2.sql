-- =====================================================
-- EMERGENCY PROFILES TABLE FIX - VERSION 2
-- ๐จ ูุญู ูุดููุฉ: infinite recursion detected in policy
-- ๐ง ููุญุฏุซ ูุญู ูุดููุฉ ON CONFLICT
-- =====================================================

-- STEP 1: ุฅุฒุงูุฉ ุฌููุน RLS policies ุงูููุฌูุฏุฉ ูููุน ุงูุชุถุงุฑุจ
DROP POLICY IF EXISTS "users_can_view_own_profile" ON profiles;
DROP POLICY IF EXISTS "users_can_update_own_profile" ON profiles;
DROP POLICY IF EXISTS "public_readers_viewable" ON profiles;
DROP POLICY IF EXISTS "super_admin_full_access" ON profiles;
DROP POLICY IF EXISTS "Users can view own profile" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
DROP POLICY IF EXISTS "Public profiles viewable by all" ON profiles;
DROP POLICY IF EXISTS "Super admins can manage all profiles" ON profiles;
DROP POLICY IF EXISTS "Admins can view all profiles" ON profiles;
DROP POLICY IF EXISTS "Admins can manage all profiles" ON profiles;
DROP POLICY IF EXISTS "Readers can view client profiles" ON profiles;
DROP POLICY IF EXISTS "Monitors can view all profiles" ON profiles;
DROP POLICY IF EXISTS "users_view_own" ON profiles;
DROP POLICY IF EXISTS "users_update_own" ON profiles;
DROP POLICY IF EXISTS "public_readers" ON profiles;
DROP POLICY IF EXISTS "super_admin_access" ON profiles;
DROP POLICY IF EXISTS "allow_own_profile_view" ON profiles;
DROP POLICY IF EXISTS "allow_own_profile_update" ON profiles;
DROP POLICY IF EXISTS "allow_public_readers" ON profiles;
DROP POLICY IF EXISTS "allow_super_admin_all" ON profiles;
DROP POLICY IF EXISTS "user_own_profile_view" ON profiles;
DROP POLICY IF EXISTS "user_own_profile_update" ON profiles;
DROP POLICY IF EXISTS "public_reader_view" ON profiles;
DROP POLICY IF EXISTS "user_profile_view" ON profiles;
DROP POLICY IF EXISTS "user_profile_update" ON profiles;
DROP POLICY IF EXISTS "reader_public_view" ON profiles;
DROP POLICY IF EXISTS "super_admin_all_access" ON profiles;
DROP POLICY IF EXISTS "profile_own_view" ON profiles;
DROP POLICY IF EXISTS "profile_own_update" ON profiles;
DROP POLICY IF EXISTS "profile_reader_public" ON profiles;
DROP POLICY IF EXISTS "profile_super_admin_access" ON profiles;
DROP POLICY IF EXISTS "emergency_allow_all_select" ON profiles;
DROP POLICY IF EXISTS "emergency_allow_all_insert" ON profiles;
DROP POLICY IF EXISTS "emergency_allow_all_update" ON profiles;
DROP POLICY IF EXISTS "view_own_profile" ON profiles;
DROP POLICY IF EXISTS "update_own_profile" ON profiles;
DROP POLICY IF EXISTS "insert_own_profile" ON profiles;
DROP POLICY IF EXISTS "view_active_readers" ON profiles;

-- STEP 2: ุงูุชุฃูุฏ ูู ูุฌูุฏ constraint ุงูุฃุฏูุงุฑ ุงูุตุญูุญ
ALTER TABLE profiles DROP CONSTRAINT IF EXISTS profiles_role_check;
ALTER TABLE profiles ADD CONSTRAINT profiles_role_check 
CHECK (role IN ('client', 'reader', 'admin', 'monitor', 'super_admin'));

-- STEP 3: ุฅุถุงูุฉ unique constraint ุนูู email ุฅุฐุง ูู ููู ููุฌูุฏ
DO $$
BEGIN
    -- ูุญุงููุฉ ุฅุถุงูุฉ unique constraint ุนูู email
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint 
        WHERE conname = 'profiles_email_unique'
    ) THEN
        ALTER TABLE profiles ADD CONSTRAINT profiles_email_unique UNIQUE (email);
    END IF;
EXCEPTION 
    WHEN others THEN
        -- ุฅุฐุง ูุดูุ ูุชุฌุงูู ุงูุฎุทุฃ ููููู
        NULL;
END $$;

-- STEP 4: ุฅูุดุงุก RLS policies ุจุณูุทุฉ ููุงุถุญุฉ ุจุฏูู recursion

-- ุงูุณูุงุญ ูููุณุชุฎุฏููู ุจุฑุคูุฉ ููููู ุงูุดุฎุตู ููุท
CREATE POLICY "view_own_profile" ON profiles 
  FOR SELECT USING (auth.uid() = id);

-- ุงูุณูุงุญ ูููุณุชุฎุฏููู ุจุชุญุฏูุซ ููููู ุงูุดุฎุตู ููุท
CREATE POLICY "update_own_profile" ON profiles 
  FOR UPDATE USING (auth.uid() = id);

-- ุงูุณูุงุญ ูููุณุชุฎุฏููู ุจุฅูุดุงุก ููููู ุงูุดุฎุตู ููุท
CREATE POLICY "insert_own_profile" ON profiles 
  FOR INSERT WITH CHECK (auth.uid() = id);

-- ุงูุณูุงุญ ููุฌููุน ุจุฑุคูุฉ ุงููุฑุงุก ุงููุดุทูู (ูููุงุฆูุฉ ุงูุนุงูุฉ)
CREATE POLICY "view_active_readers" ON profiles 
  FOR SELECT USING (role = 'reader' AND is_active = true);

-- STEP 5: ุฅุถุงูุฉ policy ูููุตูุฉ ููุณูุจุฑ ุฃุฏูู ุจุฏูู recursion
-- ูุณุชุฎุฏู hardcoded email ุจุฏูุงู ูู ูุฑุงุกุฉ ูู ููุณ ุงูุฌุฏูู ูููุน recursion
CREATE POLICY "super_admin_access" ON profiles
  FOR ALL USING (
    (SELECT auth.email()) = 'info@samiatarot.com'
  );

-- STEP 6: ุงูุชุนุงูู ูุน ุงูุณูุจุฑ ุฃุฏูู ุจุทุฑููุฉ ุขููุฉ
DO $$
BEGIN
    -- ูุญุงููุฉ ุชุญุฏูุซ ุงูุณูุจุฑ ุฃุฏูู ุฅุฐุง ูุงู ููุฌูุฏ
    UPDATE profiles 
    SET 
        role = 'super_admin',
        is_active = true,
        updated_at = NOW()
    WHERE email = 'info@samiatarot.com';
    
    -- ุฅุฐุง ูู ููู ููุฌูุฏุ ุฅูุดุงุคู
    IF NOT FOUND THEN
        INSERT INTO profiles (
            id, 
            email, 
            first_name, 
            last_name, 
            role, 
            is_active, 
            created_at, 
            updated_at
        )
        VALUES (
            gen_random_uuid(),
            'info@samiatarot.com',
            'Mohamad Nabil',
            'Zein',
            'super_admin',
            true,
            NOW(),
            NOW()
        );
    END IF;
    
EXCEPTION 
    WHEN others THEN
        -- ูู ุญุงูุฉ ูุฌูุฏ ุฎุทุฃุ ูุญุงูู ุงูุฅุฏุฑุงุฌ ุงููุจุงุดุฑ
        BEGIN
            INSERT INTO profiles (
                id, 
                email, 
                first_name, 
                last_name, 
                role, 
                is_active, 
                created_at, 
                updated_at
            )
            VALUES (
                gen_random_uuid(),
                'info@samiatarot.com',
                'Mohamad Nabil',
                'Zein',
                'super_admin',
                true,
                NOW(),
                NOW()
            );
        EXCEPTION 
            WHEN others THEN
                -- ุฅุฐุง ูุดู ูู ุดูุกุ ูุชุฌุงูู
                NULL;
        END;
END $$;

-- STEP 7: ุฅุฒุงูุฉ ุฃู duplicates ููุณูุจุฑ ุฃุฏูู
DELETE FROM profiles a USING profiles b 
WHERE a.email = b.email 
  AND a.email = 'info@samiatarot.com'
  AND a.id > b.id;

-- STEP 8: ุงูุชุญูู ูู ุงููุชูุฌุฉ
SELECT 
  'Super Admin Status' as check_type,
  id, 
  email, 
  first_name, 
  last_name, 
  role, 
  is_active,
  created_at,
  updated_at
FROM profiles 
WHERE email = 'info@samiatarot.com';

-- STEP 9: ุนุฑุถ ุฌููุน RLS policies ุงูุฌุฏูุฏุฉ ููุชุฃูุฏ
SELECT 
  'Current RLS Policies' as check_type,
  policyname,
  cmd,
  permissive,
  qual
FROM pg_policies 
WHERE schemaname = 'public' 
  AND tablename = 'profiles'
ORDER BY policyname;

-- STEP 10: ุงุฎุชุจุงุฑ ุจุณูุท ููุชุฃูุฏ ูู ุนูู ุงููุธุงู
SELECT 
  'Profiles Summary' as check_type,
  role,
  COUNT(*) as user_count,
  STRING_AGG(email, ', ') as emails
FROM profiles 
GROUP BY role
ORDER BY role;

-- =====================================================
-- ููุงุญุธุงุช ูููุฉ:
-- 1. ูุฐุง ุงูุญู ูุณุชุฎุฏู auth.email() ุจุฏูุงู ูู ูุฑุงุกุฉ ูู ุฌุฏูู profiles
-- 2. ูููุน infinite recursion ูุฃูู ูุง ููุฑุฃ ูู ููุณ ุงูุฌุฏูู
-- 3. ุงูุณูุจุฑ ุฃุฏูู ุณูุญุตู ุนูู ุตูุงุญูุฉ ูุงููุฉ
-- 4. ุจุงูู ุงููุณุชุฎุฏููู ุณูุญุตููู ุนูู ุงูุตูุงุญูุงุช ุงูุนุงุฏูุฉ
-- 5. ูุณุชุฎุฏู DO blocks ููุชุนุงูู ูุน ุงูุฃุฎุทุงุก ุงููุญุชููุฉ
-- ===================================================== 
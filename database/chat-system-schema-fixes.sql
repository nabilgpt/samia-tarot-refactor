-- =====================================================\n-- SAMIA TAROT - CHAT SYSTEM SCHEMA FIXES\n-- =====================================================\n-- This script fixes all identified issues from the forensic audit\n-- Execute in Supabase SQL Editor\n\n-- =====================================================\n-- STEP 1: ADD MISSING FOREIGN KEY CONSTRAINTS\n-- =====================================================\n\n-- Add foreign key constraints to chat_messages table\nALTER TABLE chat_messages \nADD CONSTRAINT fk_chat_messages_session_id \nFOREIGN KEY (session_id) REFERENCES chat_sessions(id) ON DELETE CASCADE;\n\nALTER TABLE chat_messages \nADD CONSTRAINT fk_chat_messages_sender_id \nFOREIGN KEY (sender_id) REFERENCES profiles(id) ON DELETE CASCADE;\n\nALTER TABLE chat_messages \nADD CONSTRAINT fk_chat_messages_reply_to \nFOREIGN KEY (reply_to_message_id) REFERENCES chat_messages(id) ON DELETE SET NULL;\n\nALTER TABLE chat_messages \nADD CONSTRAINT fk_chat_messages_approved_by \nFOREIGN KEY (approved_by) REFERENCES profiles(id) ON DELETE SET NULL;\n\n-- Add foreign key constraints to chat_sessions table\nALTER TABLE chat_sessions \nADD CONSTRAINT fk_chat_sessions_booking_id \nFOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE CASCADE;\n\n-- Add foreign key constraint for emergency calls if table exists\nDO $$\nBEGIN\n    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'emergency_calls') THEN\n        ALTER TABLE chat_sessions \n        ADD CONSTRAINT fk_chat_sessions_emergency_call_id \n        FOREIGN KEY (emergency_call_id) REFERENCES emergency_calls(id) ON DELETE CASCADE;\n    END IF;\nEND $$;\n\n-- =====================================================\n-- STEP 2: STANDARDIZE RLS POLICIES\n-- =====================================================\n\n-- Drop existing RLS policies if they exist\nDROP POLICY IF EXISTS \"chat_messages_select_policy\" ON chat_messages;\nDROP POLICY IF EXISTS \"chat_messages_insert_policy\" ON chat_messages;\nDROP POLICY IF EXISTS \"chat_messages_update_policy\" ON chat_messages;\nDROP POLICY IF EXISTS \"chat_messages_delete_policy\" ON chat_messages;\n\nDROP POLICY IF EXISTS \"chat_sessions_select_policy\" ON chat_sessions;\nDROP POLICY IF EXISTS \"chat_sessions_insert_policy\" ON chat_sessions;\nDROP POLICY IF EXISTS \"chat_sessions_update_policy\" ON chat_sessions;\nDROP POLICY IF EXISTS \"chat_sessions_delete_policy\" ON chat_sessions;\n\n-- Enable RLS on chat tables\nALTER TABLE chat_messages ENABLE ROW LEVEL SECURITY;\nALTER TABLE chat_sessions ENABLE ROW LEVEL SECURITY;\n\n-- =====================================================\n-- CHAT_MESSAGES RLS POLICIES\n-- =====================================================\n\n-- SELECT: Users can view messages from sessions they participate in\nCREATE POLICY \"chat_messages_select_policy\" ON chat_messages\nFOR SELECT USING (\n    -- User is a participant in the session\n    EXISTS (\n        SELECT 1 FROM chat_sessions cs \n        WHERE cs.id = chat_messages.session_id \n        AND auth.uid()::text = ANY(cs.participants::text[])\n    )\n    OR\n    -- User is admin/super_admin\n    EXISTS (\n        SELECT 1 FROM profiles p \n        WHERE p.id = auth.uid() \n        AND p.role IN ('admin', 'super_admin')\n    )\n);\n\n-- INSERT: Users can send messages to sessions they participate in\nCREATE POLICY \"chat_messages_insert_policy\" ON chat_messages\nFOR INSERT WITH CHECK (\n    -- User is sender\n    sender_id = auth.uid()\n    AND\n    -- User is a participant in the session\n    EXISTS (\n        SELECT 1 FROM chat_sessions cs \n        WHERE cs.id = chat_messages.session_id \n        AND auth.uid()::text = ANY(cs.participants::text[])\n        AND cs.status = 'active'\n    )\n);\n\n-- UPDATE: Users can update their own messages, admins can approve/reject\nCREATE POLICY \"chat_messages_update_policy\" ON chat_messages\nFOR UPDATE USING (\n    -- User is the sender (for editing)\n    sender_id = auth.uid()\n    OR\n    -- User is admin/super_admin (for approval/moderation)\n    EXISTS (\n        SELECT 1 FROM profiles p \n        WHERE p.id = auth.uid() \n        AND p.role IN ('admin', 'super_admin')\n    )\n);\n\n-- DELETE: Users can delete their own messages, admins can delete any\nCREATE POLICY \"chat_messages_delete_policy\" ON chat_messages\nFOR DELETE USING (\n    -- User is the sender\n    sender_id = auth.uid()\n    OR\n    -- User is admin/super_admin\n    EXISTS (\n        SELECT 1 FROM profiles p \n        WHERE p.id = auth.uid() \n        AND p.role IN ('admin', 'super_admin')\n    )\n);\n\n-- =====================================================\n-- CHAT_SESSIONS RLS POLICIES\n-- =====================================================\n\n-- SELECT: Users can view sessions they participate in\nCREATE POLICY \"chat_sessions_select_policy\" ON chat_sessions\nFOR SELECT USING (\n    -- User is a participant\n    auth.uid()::text = ANY(participants::text[])\n    OR\n    -- User is admin/super_admin\n    EXISTS (\n        SELECT 1 FROM profiles p \n        WHERE p.id = auth.uid() \n        AND p.role IN ('admin', 'super_admin')\n    )\n);\n\n-- INSERT: Users can create sessions they participate in\nCREATE POLICY \"chat_sessions_insert_policy\" ON chat_sessions\nFOR INSERT WITH CHECK (\n    -- User is included in participants\n    auth.uid()::text = ANY(participants::text[])\n    OR\n    -- User is admin/super_admin (can create any session)\n    EXISTS (\n        SELECT 1 FROM profiles p \n        WHERE p.id = auth.uid() \n        AND p.role IN ('admin', 'super_admin')\n    )\n);\n\n-- UPDATE: Participants can update session metadata, admins can update any\nCREATE POLICY \"chat_sessions_update_policy\" ON chat_sessions\nFOR UPDATE USING (\n    -- User is a participant\n    auth.uid()::text = ANY(participants::text[])\n    OR\n    -- User is admin/super_admin\n    EXISTS (\n        SELECT 1 FROM profiles p \n        WHERE p.id = auth.uid() \n        AND p.role IN ('admin', 'super_admin')\n    )\n);\n\n-- DELETE: Only admins can delete sessions\nCREATE POLICY \"chat_sessions_delete_policy\" ON chat_sessions\nFOR DELETE USING (\n    EXISTS (\n        SELECT 1 FROM profiles p \n        WHERE p.id = auth.uid() \n        AND p.role IN ('admin', 'super_admin')\n    )\n);\n\n-- =====================================================\n-- STEP 3: ADD PERFORMANCE INDEXES\n-- =====================================================\n\n-- Chat messages indexes\nCREATE INDEX IF NOT EXISTS idx_chat_messages_session_created ON chat_messages(session_id, created_at DESC);\nCREATE INDEX IF NOT EXISTS idx_chat_messages_sender_created ON chat_messages(sender_id, created_at DESC);\nCREATE INDEX IF NOT EXISTS idx_chat_messages_type_status ON chat_messages(type, status);\nCREATE INDEX IF NOT EXISTS idx_chat_messages_read_by ON chat_messages USING GIN(read_by);\nCREATE INDEX IF NOT EXISTS idx_chat_messages_delivered_to ON chat_messages USING GIN(delivered_to);\nCREATE INDEX IF NOT EXISTS idx_chat_messages_reply_to ON chat_messages(reply_to_message_id) WHERE reply_to_message_id IS NOT NULL;\n\n-- Chat sessions indexes\nCREATE INDEX IF NOT EXISTS idx_chat_sessions_participants ON chat_sessions USING GIN(participants);\nCREATE INDEX IF NOT EXISTS idx_chat_sessions_type_status ON chat_sessions(type, status);\nCREATE INDEX IF NOT EXISTS idx_chat_sessions_booking_id ON chat_sessions(booking_id) WHERE booking_id IS NOT NULL;\nCREATE INDEX IF NOT EXISTS idx_chat_sessions_emergency_call_id ON chat_sessions(emergency_call_id) WHERE emergency_call_id IS NOT NULL;\nCREATE INDEX IF NOT EXISTS idx_chat_sessions_last_message_at ON chat_sessions(last_message_at DESC NULLS LAST);\nCREATE INDEX IF NOT EXISTS idx_chat_sessions_created_at ON chat_sessions(created_at DESC);\n\n-- =====================================================\n-- STEP 4: STORAGE BUCKET POLICIES\n-- =====================================================\n\n-- Ensure chat-files bucket exists\nINSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)\nVALUES (\n    'chat-files',\n    'chat-files',\n    false,\n    10485760, -- 10MB limit\n    ARRAY[\n        'audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/webm', 'audio/mp4',\n        'image/jpeg', 'image/png', 'image/gif', 'image/webp',\n        'application/pdf', 'text/plain', 'video/mp4', 'video/webm'\n    ]\n)\nON CONFLICT (id) DO UPDATE SET\n    public = EXCLUDED.public,\n    file_size_limit = EXCLUDED.file_size_limit,\n    allowed_mime_types = EXCLUDED.allowed_mime_types;\n\n-- Drop existing storage policies\nDROP POLICY IF EXISTS \"chat_files_select_policy\" ON storage.objects;\nDROP POLICY IF EXISTS \"chat_files_insert_policy\" ON storage.objects;\nDROP POLICY IF EXISTS \"chat_files_update_policy\" ON storage.objects;\nDROP POLICY IF EXISTS \"chat_files_delete_policy\" ON storage.objects;\n\n-- CREATE STORAGE POLICIES FOR CHAT-FILES BUCKET\n\n-- SELECT: Users can view files from their chat sessions\nCREATE POLICY \"chat_files_select_policy\" ON storage.objects\nFOR SELECT USING (\n    bucket_id = 'chat-files'\n    AND\n    (\n        -- User is participant in the session (path format: session_id/user_id/filename)\n        EXISTS (\n            SELECT 1 FROM chat_sessions cs \n            WHERE cs.id::text = split_part(name, '/', 1)\n            AND auth.uid()::text = ANY(cs.participants::text[])\n        )\n        OR\n        -- User is admin/super_admin\n        EXISTS (\n            SELECT 1 FROM profiles p \n            WHERE p.id = auth.uid() \n            AND p.role IN ('admin', 'super_admin')\n        )\n    )\n);\n\n-- INSERT: Users can upload files to their chat sessions\nCREATE POLICY \"chat_files_insert_policy\" ON storage.objects\nFOR INSERT WITH CHECK (\n    bucket_id = 'chat-files'\n    AND\n    (\n        -- User is participant in the session and uploader\n        EXISTS (\n            SELECT 1 FROM chat_sessions cs \n            WHERE cs.id::text = split_part(name, '/', 1)\n            AND auth.uid()::text = ANY(cs.participants::text[])\n            AND auth.uid()::text = split_part(name, '/', 2)\n        )\n        OR\n        -- User is admin/super_admin\n        EXISTS (\n            SELECT 1 FROM profiles p \n            WHERE p.id = auth.uid() \n            AND p.role IN ('admin', 'super_admin')\n        )\n    )\n);\n\n-- UPDATE: Users can update their own files, admins can update any\nCREATE POLICY \"chat_files_update_policy\" ON storage.objects\nFOR UPDATE USING (\n    bucket_id = 'chat-files'\n    AND\n    (\n        -- User is the uploader\n        auth.uid()::text = split_part(name, '/', 2)\n        OR\n        -- User is admin/super_admin\n        EXISTS (\n            SELECT 1 FROM profiles p \n            WHERE p.id = auth.uid() \n            AND p.role IN ('admin', 'super_admin')\n        )\n    )\n);\n\n-- DELETE: Users can delete their own files, admins can delete any\nCREATE POLICY \"chat_files_delete_policy\" ON storage.objects\nFOR DELETE USING (\n    bucket_id = 'chat-files'\n    AND\n    (\n        -- User is the uploader\n        auth.uid()::text = split_part(name, '/', 2)\n        OR\n        -- User is admin/super_admin\n        EXISTS (\n            SELECT 1 FROM profiles p \n            WHERE p.id = auth.uid() \n            AND p.role IN ('admin', 'super_admin')\n        )\n    )\n);\n\n-- =====================================================\n-- STEP 5: AUDIT LOGGING ENHANCEMENTS\n-- =====================================================\n\n-- Create chat audit log table if it doesn't exist\nCREATE TABLE IF NOT EXISTS chat_audit_logs (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    action VARCHAR(50) NOT NULL,\n    table_name VARCHAR(50) NOT NULL,\n    record_id UUID NOT NULL,\n    user_id UUID,\n    session_id UUID,\n    old_values JSONB,\n    new_values JSONB,\n    ip_address INET,\n    user_agent TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create indexes for audit logs\nCREATE INDEX IF NOT EXISTS idx_chat_audit_logs_action ON chat_audit_logs(action);\nCREATE INDEX IF NOT EXISTS idx_chat_audit_logs_table_name ON chat_audit_logs(table_name);\nCREATE INDEX IF NOT EXISTS idx_chat_audit_logs_user_id ON chat_audit_logs(user_id);\nCREATE INDEX IF NOT EXISTS idx_chat_audit_logs_session_id ON chat_audit_logs(session_id);\nCREATE INDEX IF NOT EXISTS idx_chat_audit_logs_created_at ON chat_audit_logs(created_at DESC);\n\n-- Create audit trigger function\nCREATE OR REPLACE FUNCTION log_chat_audit()\nRETURNS TRIGGER AS $$\nBEGIN\n    INSERT INTO chat_audit_logs (\n        action,\n        table_name,\n        record_id,\n        user_id,\n        session_id,\n        old_values,\n        new_values\n    ) VALUES (\n        TG_OP,\n        TG_TABLE_NAME,\n        COALESCE(NEW.id, OLD.id),\n        auth.uid(),\n        CASE \n            WHEN TG_TABLE_NAME = 'chat_messages' THEN COALESCE(NEW.session_id, OLD.session_id)\n            WHEN TG_TABLE_NAME = 'chat_sessions' THEN COALESCE(NEW.id, OLD.id)\n            ELSE NULL\n        END,\n        CASE WHEN TG_OP = 'DELETE' THEN to_jsonb(OLD) ELSE NULL END,\n        CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN to_jsonb(NEW) ELSE NULL END\n    );\n    \n    RETURN COALESCE(NEW, OLD);\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Create audit triggers\nDROP TRIGGER IF EXISTS chat_messages_audit_trigger ON chat_messages;\nCREATE TRIGGER chat_messages_audit_trigger\n    AFTER INSERT OR UPDATE OR DELETE ON chat_messages\n    FOR EACH ROW EXECUTE FUNCTION log_chat_audit();\n\nDROP TRIGGER IF EXISTS chat_sessions_audit_trigger ON chat_sessions;\nCREATE TRIGGER chat_sessions_audit_trigger\n    AFTER INSERT OR UPDATE OR DELETE ON chat_sessions\n    FOR EACH ROW EXECUTE FUNCTION log_chat_audit();\n\n-- =====================================================\n-- STEP 6: CLEANUP LEGACY REFERENCES\n-- =====================================================\n\n-- Remove any references to old chat-attachments bucket\n-- (This is informational - manual cleanup may be needed)\n\n-- Check for orphaned files in wrong buckets\n-- SELECT name FROM storage.objects WHERE bucket_id = 'chat-attachments';\n\n-- =====================================================\n-- STEP 7: PERFORMANCE OPTIMIZATIONS\n-- =====================================================\n\n-- Add partial indexes for common queries\nCREATE INDEX IF NOT EXISTS idx_chat_messages_active_sessions \nON chat_messages(session_id, created_at DESC) \nWHERE is_deleted = false;\n\nCREATE INDEX IF NOT EXISTS idx_chat_messages_unread \nON chat_messages(session_id) \nWHERE array_length(read_by, 1) IS NULL OR array_length(read_by, 1) = 0;\n\nCREATE INDEX IF NOT EXISTS idx_chat_sessions_active \nON chat_sessions(last_message_at DESC) \nWHERE status = 'active';\n\n-- =====================================================\n-- VERIFICATION QUERIES\n-- =====================================================\n\n-- Verify foreign key constraints\nSELECT \n    tc.table_name, \n    tc.constraint_name, \n    tc.constraint_type,\n    kcu.column_name,\n    ccu.table_name AS foreign_table_name,\n    ccu.column_name AS foreign_column_name\nFROM information_schema.table_constraints tc\nJOIN information_schema.key_column_usage kcu \n    ON tc.constraint_name = kcu.constraint_name\nJOIN information_schema.constraint_column_usage ccu \n    ON ccu.constraint_name = tc.constraint_name\nWHERE tc.table_name IN ('chat_messages', 'chat_sessions')\n    AND tc.constraint_type = 'FOREIGN KEY';\n\n-- Verify RLS policies\nSELECT \n    schemaname,\n    tablename,\n    policyname,\n    cmd,\n    qual\nFROM pg_policies \nWHERE tablename IN ('chat_messages', 'chat_sessions')\nORDER BY tablename, policyname;\n\n-- Verify indexes\nSELECT \n    t.relname AS table_name,\n    i.relname AS index_name,\n    array_to_string(array_agg(a.attname), ', ') AS column_names\nFROM pg_class t\nJOIN pg_index ix ON t.oid = ix.indrelid\nJOIN pg_class i ON i.oid = ix.indexrelid\nJOIN pg_attribute a ON a.attrelid = t.oid AND a.attnum = ANY(ix.indkey)\nWHERE t.relname IN ('chat_messages', 'chat_sessions')\nGROUP BY t.relname, i.relname\nORDER BY t.relname, i.relname;\n\n-- =====================================================\n-- COMPLETION MESSAGE\n-- =====================================================\n\nSELECT 'Chat System Schema Fixes Applied Successfully!' AS status;\nSELECT 'Foreign Key Constraints: ✅ Added' AS foreign_keys;\nSELECT 'RLS Policies: ✅ Standardized' AS rls_policies;\nSELECT 'Performance Indexes: ✅ Optimized' AS indexes;\nSELECT 'Storage Bucket Policies: ✅ Secured' AS storage;\nSELECT 'Audit Logging: ✅ Enhanced' AS audit_logging; 
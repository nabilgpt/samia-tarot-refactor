#!/usr/bin/env node

/**
 * 🎯 SAMIA TAROT - Payment Methods Setup Script
 * This script will populate the payment_settings table with all required payment methods
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Supabase configuration
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://uuseflmielktdcltzwzt.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV1c2VmbG1pZWxrdGRjbHR6d3p0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODM0NTExNSwiZXhwIjoyMDYzOTIxMTE1fQ.TNcj0otaeYtl0nDJYn760wSgSuKSYG8s7r-LD04Z9_E';

// Create Supabase admin client
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Payment methods configuration
const paymentMethods = [
  {
    method: 'stripe',
    enabled: true,
    countries: ['DE', 'FR', 'IT', 'ES', 'NL', 'BE', 'AT', 'PT', 'IE', 'LU', 'AE'],
    details: {
      description: 'Credit/Debit Card via Stripe',
      supports_apple_pay: true,
      supports_google_pay: true
    },
    fees: { percentage: 2.9, fixed: 0.30, currency: 'USD' },
    processing_time: 'Instant',
    auto_confirm: true,
    requires_receipt: false,
    display_order: 1
  },
  {
    method: 'square',
    enabled: true,
    countries: ['US', 'CA', 'AU', 'GB', 'JP'],
    details: {
      description: 'Credit/Debit Card via Square',
      supports_apple_pay: true,
      supports_google_pay: true
    },
    fees: { percentage: 2.6, fixed: 0.10, currency: 'USD' },
    processing_time: 'Instant',
    auto_confirm: true,
    requires_receipt: false,
    display_order: 2
  },
  {
    method: 'usdt',
    enabled: true,
    countries: ['GLOBAL'],
    details: {
      description: 'USDT Cryptocurrency',
      networks: ['ethereum', 'tron'],
      wallet_addresses: { ethereum: '', tron: '' }
    },
    fees: { type: 'network', description: 'Network fees only' },
    processing_time: '5-15 minutes',
    auto_confirm: false,
    requires_receipt: true,
    display_order: 3
  },
  {
    method: 'western_union',
    enabled: true,
    countries: ['GLOBAL'],
    details: {
      description: 'Western Union Money Transfer',
      requires_id: true
    },
    fees: { range: '5-15', currency: 'USD', description: 'Transfer fee' },
    processing_time: '1-3 business days',
    auto_confirm: false,
    requires_receipt: true,
    display_order: 4
  },
  {
    method: 'moneygram',
    enabled: true,
    countries: ['GLOBAL'],
    details: {
      description: 'MoneyGram International Transfer',
      requires_id: true
    },
    fees: { range: '5-12', currency: 'USD', description: 'Transfer fee' },
    processing_time: '1-3 business days',
    auto_confirm: false,
    requires_receipt: true,
    display_order: 5
  },
  {
    method: 'ria',
    enabled: true,
    countries: ['GLOBAL'],
    details: {
      description: 'Ria Money Transfer Service',
      requires_id: true
    },
    fees: { range: '3-10', currency: 'USD', description: 'Transfer fee' },
    processing_time: '1-2 business days',
    auto_confirm: false,
    requires_receipt: true,
    display_order: 6
  },
  {
    method: 'omt',
    enabled: true,
    countries: ['LB'],
    details: {
      description: 'OMT Lebanon Money Transfer',
      local_currency: 'LBP'
    },
    fees: { range: '2-5', currency: 'USD', description: 'Local transfer fee' },
    processing_time: 'Same day',
    auto_confirm: false,
    requires_receipt: true,
    display_order: 7
  },
  {
    method: 'whish',
    enabled: true,
    countries: ['LB'],
    details: {
      description: 'Whish Money Digital Wallet',
      local_currency: 'LBP'
    },
    fees: { percentage: 1.5, description: 'Transaction fee' },
    processing_time: 'Instant',
    auto_confirm: false,
    requires_receipt: true,
    display_order: 8
  },
  {
    method: 'bob',
    enabled: true,
    countries: ['LB'],
    details: {
      description: 'Bank of Beirut Direct Transfer',
      local_currency: 'LBP'
    },
    fees: { fixed: 0, description: 'No additional fees' },
    processing_time: '1-2 business days',
    auto_confirm: false,
    requires_receipt: true,
    display_order: 9
  },
  {
    method: 'wallet',
    enabled: true,
    countries: ['GLOBAL'],
    details: {
      description: 'SAMIA In-App Wallet',
      instant_payment: true
    },
    fees: { fixed: 0, description: 'No fees' },
    processing_time: 'Instant',
    auto_confirm: true,
    requires_receipt: false,
    display_order: 10
  }
];

async function setupPaymentMethods() {
  console.log('🎯 SAMIA TAROT - Setting up Payment Methods...\n');

  try {
    // First, try to create the table (will be ignored if it exists)
    console.log('📋 Creating payment_settings table...');
    
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS payment_settings (
        id SERIAL PRIMARY KEY,
        method VARCHAR(32) NOT NULL UNIQUE CHECK (
          method IN (
            'stripe', 'square', 'usdt', 'western_union', 'moneygram',
            'ria', 'omt', 'whish', 'bob', 'wallet'
          )
        ),
        enabled BOOLEAN DEFAULT true,
        countries TEXT[] DEFAULT '{}',
        details JSONB DEFAULT '{}',
        fees JSONB DEFAULT '{}',
        processing_time VARCHAR(100),
        auto_confirm BOOLEAN DEFAULT false,
        requires_receipt BOOLEAN DEFAULT false,
        display_order INTEGER DEFAULT 0,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;

    // Execute the SQL directly
    const { error: createError } = await supabase.rpc('exec_sql', { 
      sql_query: createTableSQL 
    });

    if (createError) {
      console.log('⚠️  Table creation note:', createError.message);
      // Continue anyway - table might already exist
    } else {
      console.log('✅ payment_settings table ready');
    }

    // Insert payment methods one by one
    console.log('\n📝 Inserting payment methods...\n');

    let successCount = 0;
    let errorCount = 0;

    for (const method of paymentMethods) {
      try {
        const { data, error } = await supabase
          .from('payment_settings')
          .upsert(method, { 
            onConflict: 'method',
            ignoreDuplicates: false 
          })
          .select();

        if (error) {
          console.log(`❌ Error inserting ${method.method}:`, error.message);
          errorCount++;
        } else {
          console.log(`✅ ${method.method.padEnd(15)} - ${method.details.description}`);
          successCount++;
        }
      } catch (err) {
        console.log(`💥 Exception inserting ${method.method}:`, err.message);
        errorCount++;
      }
    }

    // Verify the setup
    console.log('\n🔍 Verifying payment methods setup...');
    
    const { data: verifyData, error: verifyError } = await supabase
      .from('payment_settings')
      .select('method, enabled, display_order')
      .order('display_order');

    if (verifyError) {
      console.log('❌ Error verifying setup:', verifyError.message);
    } else {
      console.log('\n📊 Payment Methods Summary:');
      console.log('═══════════════════════════════');
      verifyData.forEach(method => {
        const status = method.enabled ? '✅ Enabled' : '❌ Disabled';
        console.log(`${method.display_order.toString().padStart(2)}. ${method.method.padEnd(15)} ${status}`);
      });
      
      console.log('\n🎉 SUCCESS! Payment methods setup completed!');
      console.log(`📈 Total methods configured: ${verifyData.length}`);
      console.log(`🟢 Enabled methods: ${verifyData.filter(m => m.enabled).length}`);
      console.log(`✅ Successful inserts: ${successCount}`);
      if (errorCount > 0) {
        console.log(`❌ Failed inserts: ${errorCount}`);
      }
    }

  } catch (error) {
    console.log('💥 Setup failed:', error.message);
    console.log('Stack:', error.stack);
  }
}

// Run the setup
setupPaymentMethods(); 
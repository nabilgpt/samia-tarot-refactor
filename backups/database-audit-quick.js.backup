#!/usr/bin/env node
/**
 * 🔍 SAMIA TAROT - Quick Database Audit Script
 * Comprehensive check of current database state
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// Supabase configuration
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://uuseflmielktdcltzwzt.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV1c2VmbG1pZWxrdGRjbHR6d3p0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODM0NTExNSwiZXhwIjoyMDYzOTIxMTE1fQ.TNcj0otaeYtl0nDJYn760wSgSuKSYG8s7r-LD04Z9_E';

// Create Supabase admin client
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function databaseAuditQuick() {
  console.log('🔍 SAMIA TAROT - DATABASE AUDIT QUICK CHECK');
  console.log('═══════════════════════════════════════════════');

  try {
    // Check all critical tables
    const criticalTables = [
      'profiles', 'services', 'bookings', 'notifications',
      'payment_methods', 'wallet_transactions', 'payment_receipts',
      'chat_sessions', 'chat_messages', 'voice_notes',
      'daily_analytics', 'reader_analytics', 'user_activity_logs',
      'ai_learning_data', 'ai_reading_results', 'reader_applications',
      'tarot_decks', 'tarot_spreads', 'call_sessions',
      'call_recordings', 'emergency_call_logs', 'reader_schedule',
      'working_hours_requests', 'system_settings', 'app_config',
      'emergency_escalations', 'admin_users'
    ];

    console.log('\n📊 CRITICAL TABLES VERIFICATION:');
    console.log('─────────────────────────────────');

    let existingTables = 0;
    let missingTables = [];

    for (const tableName of criticalTables) {
      try {
        const { data, error } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);

        if (error) {
          console.log(`❌ ${tableName} - ${error.message}`);
          missingTables.push(tableName);
        } else {
          console.log(`✅ ${tableName} - ACCESSIBLE`);
          existingTables++;
        }
      } catch (err) {
        console.log(`❌ ${tableName} - ${err.message}`);
        missingTables.push(tableName);
      }
    }

    const completionPercentage = ((existingTables / criticalTables.length) * 100).toFixed(1);

    console.log('\n📈 DATABASE COMPLETION SUMMARY:');
    console.log('─────────────────────────────────');
    console.log(`✅ Existing Tables: ${existingTables}/${criticalTables.length}`);
    console.log(`❌ Missing Tables: ${missingTables.length}`);
    console.log(`📊 Completion: ${completionPercentage}%`);

    if (missingTables.length > 0) {
      console.log('\n🚨 MISSING TABLES:');
      missingTables.forEach(table => console.log(`   • ${table}`));
    }

    // Determine status
    let status, recommendation;
    if (completionPercentage >= 90) {
      status = '🟢 EXCELLENT';
      recommendation = 'Database is production ready!';
    } else if (completionPercentage >= 70) {
      status = '🟡 GOOD';
      recommendation = 'Minor tables missing, mostly ready.';
    } else if (completionPercentage >= 50) {
      status = '🟠 FAIR';
      recommendation = 'Significant work needed.';
    } else {
      status = '🔴 CRITICAL';
      recommendation = 'Major database completion required.';
    }

    console.log(`\n🎯 STATUS: ${status}`);
    console.log(`💡 RECOMMENDATION: ${recommendation}`);

    // Additional checks
    console.log('\n🔍 ADDITIONAL SYSTEM CHECKS:');
    console.log('─────────────────────────────────');

    // Check user count
    try {
      const { count: userCount } = await supabase
        .from('profiles')
        .select('*', { count: 'exact', head: true });
      console.log(`👥 Users Registered: ${userCount || 0}`);
    } catch (err) {
      console.log('👥 Users Registered: Unable to check');
    }

    // Check services
    try {
      const { count: serviceCount } = await supabase
        .from('services')
        .select('*', { count: 'exact', head: true });
      console.log(`🛍️ Services Available: ${serviceCount || 0}`);
    } catch (err) {
      console.log('🛍️ Services Available: Unable to check');
    }

    // Check payment methods if table exists
    if (existingTables > 15) {
      try {
        const { count: paymentCount } = await supabase
          .from('payment_methods')
          .select('*', { count: 'exact', head: true });
        console.log(`💳 Payment Methods: ${paymentCount || 0}`);
      } catch (err) {
        console.log('💳 Payment Methods: Table not accessible');
      }
    }

    console.log('\n✅ DATABASE AUDIT COMPLETED!');
    
    return {
      completionPercentage: parseFloat(completionPercentage),
      existingTables,
      missingTables,
      status,
      recommendation
    };

  } catch (error) {
    console.error('💥 DATABASE AUDIT FAILED:', error.message);
    return {
      completionPercentage: 0,
      existingTables: 0,
      missingTables: [],
      status: '🔴 ERROR',
      recommendation: 'Fix database connection'
    };
  }
}

// Run if called directly
if (require.main === module) {
  databaseAuditQuick()
    .then(() => process.exit(0))
    .catch(error => {
      console.error(error);
      process.exit(1);
    });
}

module.exports = { databaseAuditQuick }; 
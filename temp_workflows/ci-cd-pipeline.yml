name: 🚀 SAMIA TAROT - CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Code Quality & Security Checks
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        npm ci
        npm audit --audit-level=moderate

    - name: 🔍 ESLint Code Analysis
      run: npm run lint
      continue-on-error: true

    - name: 🔒 Security Audit
      run: |
        npm audit --json | tee security-audit.json
        # Check for high/critical vulnerabilities
        if [ $(npm audit --json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical') -gt 0 ]; then
          echo "⚠️ High/Critical vulnerabilities found!"
          npm audit
          exit 1
        fi

    - name: 🕵️ Secret Scanning
      run: |
        # Check for hardcoded secrets
        echo "🔍 Scanning for hardcoded secrets..."
        if grep -r "sk-[a-zA-Z0-9]" src/ --exclude-dir=node_modules || \
           grep -r "AKIA[0-9A-Z]" src/ --exclude-dir=node_modules || \
           grep -r "[a-zA-Z0-9+/]{40}" src/ --exclude-dir=node_modules; then
          echo "⚠️ Potential secrets found in source code!"
          exit 1
        fi
        echo "✅ No hardcoded secrets detected"

    - name: 📊 Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-report
        path: security-audit.json

  # 🧪 Comprehensive Testing Suite
  testing:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🧪 Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        npm test -- --coverage --testPathPattern="src/__tests__/(unit|api|components)" --verbose
        echo "UNIT_TEST_COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')" >> $GITHUB_ENV

    - name: 🔗 Run Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        npm run test:integration
      env:
        TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

    - name: 🌐 Run E2E Tests
      if: matrix.test-type == 'e2e'
      run: |
        npm run test:e2e
        npm run test:e2e:mobile
      env:
        E2E_BASE_URL: http://localhost:3000

    - name: 📊 Upload Test Coverage
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: 📋 Test Summary
      if: matrix.test-type == 'unit'
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage**: ${{ env.UNIT_TEST_COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: 80%" >> $GITHUB_STEP_SUMMARY

  # 🏗️ Build & Containerization
  build:
    name: 🏗️ Build & Container
    runs-on: ubuntu-latest
    needs: [code-quality, testing]
    
    outputs:
      image-tag: ${{ steps.image.outputs.tag }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🏗️ Build Frontend
      run: |
        npm run build
        ls -la dist/

    - name: 🏗️ Build Backend
      run: |
        # Backend build steps
        npm run build:backend
        
    - name: 🔧 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: 🏗️ Build & Push Container
      id: image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🔒 Security & Vulnerability Scanning
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔍 Container Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Security Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔍 Dependency Vulnerability Check
      run: |
        npm audit --audit-level=high
        npx snyk test --severity-threshold=high

  # 🚀 Deployment Pipeline
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.samiatarot.com
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Deploy using your preferred method (Docker, Kubernetes, etc.)
        
    - name: 🏥 Health Check
      run: |
        echo "🏥 Running health checks..."
        curl -f https://staging.samiatarot.com/api/health || exit 1
        
    - name: 🧪 Smoke Tests
      run: |
        npm run test:smoke:staging

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://samiatarot.com
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🚀 Blue-Green Deployment
      run: |
        echo "🚀 Starting blue-green deployment..."
        # Implement blue-green deployment strategy
        
    - name: 🏥 Production Health Check
      run: |
        echo "🏥 Production health verification..."
        curl -f https://samiatarot.com/api/health || exit 1
        
    - name: 📊 Performance Monitoring
      run: |
        echo "📊 Setting up monitoring alerts..."
        # Configure monitoring and alerting

  # 📊 Post-Deployment Monitoring
  monitoring:
    name: 📊 Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📊 Setup Monitoring
      run: |
        echo "📊 Configuring post-deployment monitoring..."
        
    - name: 🚨 Setup Alerts
      run: |
        echo "🚨 Configuring alerting rules..."

    - name: 📋 Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ needs.build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Health**: ✅ Healthy" >> $GITHUB_STEP_SUMMARY
        echo "- **Monitoring**: ✅ Active" >> $GITHUB_STEP_SUMMARY 
name: CI/CD Quality Gate

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript Check
        run: npm run typecheck

  lighthouse-performance:
    name: Lighthouse Performance Budgets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        run: npm run build

      - name: Start preview server
        run: npm run preview &
        env:
          CI: true

      - name: Wait for server
        run: npx wait-on http://localhost:5173 -t 30000

      - name: Run Lighthouse CI
        run: npx @lhci/cli@0.12.x autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci

  console-errors-check:
    name: Console Errors Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        run: npm run build

      - name: Start preview server
        run: npm run preview &

      - name: Wait for server
        run: npx wait-on http://localhost:5173 -t 30000

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Check for console errors
        run: |
          node -e "
          const { chromium } = require('playwright');

          (async () => {
            const browser = await chromium.launch();
            const page = await browser.newPage();
            const errors = [];

            page.on('console', msg => {
              if (msg.type() === 'error' || msg.type() === 'warning') {
                errors.push({
                  type: msg.type(),
                  text: msg.text(),
                  url: page.url()
                });
              }
            });

            const urls = [
              'http://localhost:5173/',
              'http://localhost:5173/services',
              'http://localhost:5173/horoscopes'
            ];

            for (const url of urls) {
              await page.goto(url, { waitUntil: 'networkidle' });
              await page.waitForTimeout(2000);
            }

            await browser.close();

            if (errors.length > 0) {
              console.error('Console errors/warnings found:');
              console.error(JSON.stringify(errors, null, 2));
              process.exit(1);
            } else {
              console.log('No console errors or warnings found.');
            }
          })();
          "

  rls-parity-tests:
    name: RLS Parity Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install pytest psycopg2-binary

      - name: Run RLS parity tests
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/test
        run: |
          pytest tests/rls_parity_tests.py -v

  edge-cache-validation:
    name: Validate Edge Cache Headers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        run: npm run build

      - name: Start preview server
        run: npm run preview &

      - name: Wait for server
        run: npx wait-on http://localhost:5173 -t 30000

      - name: Validate Cache-Control headers
        run: |
          # Check index.html has no-cache
          CACHE_HEADER=$(curl -sI http://localhost:5173/ | grep -i cache-control || echo "none")
          if [[ "$CACHE_HEADER" != *"no-cache"* ]] && [[ "$CACHE_HEADER" != *"no-store"* ]]; then
            echo "ERROR: index.html must have no-cache or no-store"
            exit 1
          fi

          # Check static assets have immutable cache
          STATIC_CACHE=$(curl -sI http://localhost:5173/assets/index.js | grep -i cache-control || echo "none")
          if [[ "$STATIC_CACHE" != *"immutable"* ]] && [[ "$STATIC_CACHE" != *"max-age"* ]]; then
            echo "WARNING: Static assets should have long cache with immutable"
          fi

          echo "Cache-Control headers validated successfully"

  security-headers-check:
    name: Security Headers Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and start server
        run: |
          npm run build
          npm run preview &
          npx wait-on http://localhost:5173 -t 30000

      - name: Check security headers
        run: |
          HEADERS=$(curl -sI http://localhost:5173/)

          # Check for HSTS (if served over HTTPS)
          if [[ "$HEADERS" == *"https"* ]]; then
            if [[ "$HEADERS" != *"Strict-Transport-Security"* ]]; then
              echo "WARNING: Missing HSTS header"
            fi
          fi

          # Check for X-Content-Type-Options
          if [[ "$HEADERS" != *"X-Content-Type-Options"* ]]; then
            echo "WARNING: Missing X-Content-Type-Options header"
          fi

          # Check for X-Frame-Options
          if [[ "$HEADERS" != *"X-Frame-Options"* ]]; then
            echo "WARNING: Missing X-Frame-Options header"
          fi

          echo "Security headers check completed"

  quality-gate:
    name: Quality Gate
    needs: [lint-and-typecheck, lighthouse-performance, console-errors-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check all jobs passed
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" != "success" ]]; then
            echo "Lint/TypeCheck failed"
            exit 1
          fi

          if [[ "${{ needs.lighthouse-performance.result }}" != "success" ]]; then
            echo "Lighthouse performance budgets failed"
            exit 1
          fi

          if [[ "${{ needs.console-errors-check.result }}" != "success" ]]; then
            echo "Console errors detected"
            exit 1
          fi

          echo "All quality gates passed!"
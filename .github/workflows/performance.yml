name: M36 Performance CI

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          CI: true
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.13.x
        
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Check Performance Budgets
        run: npm run performance:budget
        
      - name: Generate Performance Report
        run: npm run performance:report
        if: always()
        
      - name: Upload Lighthouse Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: |
            lighthouse-results/
            performance-reports/
            .lighthouseci/
          retention-days: 30
          include-hidden-files: true
          
      - name: Comment PR with Performance Summary
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find latest performance report
            const reportsDir = './performance-reports';
            if (!fs.existsSync(reportsDir)) return;
            
            const files = fs.readdirSync(reportsDir)
              .filter(f => f.startsWith('performance-summary-'))
              .sort()
              .reverse();
              
            if (files.length === 0) return;
            
            const summaryPath = path.join(reportsDir, files[0]);
            const summary = fs.readFileSync(summaryPath, 'utf8');
            
            // Create PR comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üéØ M36 Performance Report')
            );
            
            const commentBody = `## üéØ M36 Performance Report
            
            ${summary}
            
            <details>
            <summary>üìä Detailed Results</summary>
            
            Full performance reports are available in the build artifacts.
            
            </details>
            
            ---
            *ü§ñ Generated by M36 Performance CI*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  performance-regression-check:
    runs-on: ubuntu-latest
    needs: lighthouse-ci
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download Lighthouse Results
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results
          
      - name: Check for Performance Regressions
        run: |
          echo "üîç Checking for performance regressions..."
          
          # Check if any Core Web Vitals violations exist
          if [ -f "lighthouse-results/performance-budget-*.json" ]; then
            violations=$(jq '.summary.violations' lighthouse-results/performance-budget-*.json | head -1)
            
            if [ "$violations" -gt 0 ]; then
              echo "‚ùå Performance budget violations detected: $violations"
              echo "Check the detailed report for optimization opportunities."
              exit 1
            else
              echo "‚úÖ All performance budgets are passing"
            fi
          else
            echo "‚ö†Ô∏è No performance budget results found"
            exit 1
          fi
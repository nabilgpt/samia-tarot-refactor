name: M42 Nightly Security Audit

on:
  schedule:
    # Run at 2 AM UTC daily
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual trigger

jobs:
  security-audit:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup PostgreSQL Client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Run Security Audit
        id: audit
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "🔍 Running nightly security audit..."

          # Run audit snapshot script
          AUDIT_OUTPUT=$(psql "$DATABASE_URL" -f scripts/ops/audit_snapshot.sql 2>&1)
          AUDIT_EXIT_CODE=$?

          # Save output to file
          echo "$AUDIT_OUTPUT" > audit_results.txt

          # Extract summary
          AUDIT_SUMMARY=$(echo "$AUDIT_OUTPUT" | tail -5)
          echo "audit_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$AUDIT_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check if audit passed
          if echo "$AUDIT_OUTPUT" | grep -q "AUDIT_FAIL"; then
            echo "audit_status=FAIL" >> $GITHUB_OUTPUT
            echo "❌ Security audit FAILED"
            exit 1
          elif echo "$AUDIT_OUTPUT" | grep -q "AUDIT_PASS"; then
            echo "audit_status=PASS" >> $GITHUB_OUTPUT
            echo "✅ Security audit PASSED"
          else
            echo "audit_status=UNKNOWN" >> $GITHUB_OUTPUT
            echo "⚠️ Security audit status unknown"
            exit 1
          fi

      - name: Run Backup Verification
        id: backup
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SUPABASE_DB_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "📋 Running backup verification..."

          # Make backup script executable
          chmod +x scripts/ops/backup_verify.sh

          # Run backup verification
          if ./scripts/ops/backup_verify.sh; then
            echo "backup_status=PASS" >> $GITHUB_OUTPUT
            echo "✅ Backup verification PASSED"
          else
            echo "backup_status=FAIL" >> $GITHUB_OUTPUT
            echo "❌ Backup verification FAILED"
          fi

      - name: Upload Audit Evidence
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-evidence-${{ github.run_number }}
          path: |
            audit_results.txt
            evidence/backup_verify_*.log
          retention-days: 90

      - name: Create Issue on Audit Failure
        if: steps.audit.outputs.audit_status == 'FAIL' || steps.backup.outputs.backup_status == 'FAIL'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const auditStatus = '${{ steps.audit.outputs.audit_status }}';
            const backupStatus = '${{ steps.backup.outputs.backup_status }}';
            const runNumber = '${{ github.run_number }}';
            const timestamp = new Date().toISOString();

            const title = `🚨 Nightly Audit Failure - ${new Date().toISOString().split('T')[0]}`;

            const body = `## Security Audit Failure Report

            **Timestamp:** ${timestamp}
            **Run Number:** ${runNumber}
            **Audit Status:** ${auditStatus}
            **Backup Status:** ${backupStatus}

            ### Audit Summary
            \`\`\`
            ${{ steps.audit.outputs.audit_summary }}
            \`\`\`

            ### Immediate Actions Required
            ${auditStatus === 'FAIL' ? '- [ ] Review security configuration drift\n- [ ] Check RLS policy status\n- [ ] Verify audit function integrity' : ''}
            ${backupStatus === 'FAIL' ? '- [ ] Investigate backup system\n- [ ] Verify database connectivity\n- [ ] Check backup retention' : ''}

            ### Investigation Steps
            1. Review audit evidence: [Audit Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Check system logs for the time period around ${timestamp}
            3. Verify database connectivity and permissions
            4. Run manual audit checks to isolate issues

            ### Related Documentation
            - [Security Audit Runbook](docs/ops/README.md)
            - [Backup Procedures](docs/ops/backup-restore.md)
            - [Incident Response](docs/ops/incident-response.md)

            **Auto-generated by M42 Nightly Audit workflow**`;

            // Create the issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'audit-failure', 'high-priority']
            });

            console.log(`Created issue #${issue.data.number}: ${title}`);

      - name: Trigger Siren Alert on Critical Failure
        if: steps.audit.outputs.audit_status == 'FAIL'
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          ADMIN_USER_ID: ${{ secrets.ADMIN_USER_ID }}
        run: |
          echo "🚨 Triggering Siren alert for audit failure..."

          curl -X POST "${API_BASE_URL}/api/siren/trigger" \
            -H "X-User-ID: ${ADMIN_USER_ID}" \
            -H "Content-Type: application/json" \
            -d '{
              "incident_type": "security_audit_failure",
              "severity": 1,
              "source": "nightly_audit_ci",
              "policy_name": "Critical",
              "context": {
                "workflow_run": "${{ github.run_id }}",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                "repository": "${{ github.repository }}"
              },
              "variables": {
                "audit_status": "${{ steps.audit.outputs.audit_status }}",
                "backup_status": "${{ steps.backup.outputs.backup_status }}"
              },
              "force": true
            }' || echo "Failed to trigger Siren alert"

      - name: Post Success Summary
        if: steps.audit.outputs.audit_status == 'PASS' && steps.backup.outputs.backup_status == 'PASS'
        run: |
          echo "✅ Nightly audit completed successfully"
          echo "🔒 Security configuration: COMPLIANT"
          echo "💾 Backup verification: PASSED"
          echo "📊 Evidence archived with run #${{ github.run_number }}"

  compliance-report:
    runs-on: ubuntu-latest
    needs: security-audit
    if: always()
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate Monthly Report
        if: github.event.schedule == '0 2 1 * *'  # First day of month
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "📈 Generating monthly compliance report..."

          # Generate compliance summary
          psql "$DATABASE_URL" -c "
            SELECT
              'Monthly Compliance Report' as report_type,
              DATE_TRUNC('month', CURRENT_DATE) as reporting_period,
              COUNT(CASE WHEN event LIKE '%security%' THEN 1 END) as security_events,
              COUNT(CASE WHEN event LIKE '%audit%' THEN 1 END) as audit_events,
              COUNT(CASE WHEN event LIKE '%compliance%' THEN 1 END) as compliance_events
            FROM audit_log
            WHERE created_at >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')
            AND created_at < DATE_TRUNC('month', CURRENT_DATE);
          " > monthly_compliance_report.txt

      - name: Archive Monthly Report
        if: github.event.schedule == '0 2 1 * *'
        uses: actions/upload-artifact@v4
        with:
          name: monthly-compliance-report-${{ github.run_number }}
          path: monthly_compliance_report.txt
          retention-days: 365